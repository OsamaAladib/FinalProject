// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectDB1.DBClasses;

namespace ProjectDB1.Migrations
{
    [DbContext(typeof(LogiTestDbContext))]
    [Migration("20191012174451_1012e")]
    partial class _1012e
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectDB1.DBClasses.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("assignment_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssTest")
                        .HasColumnName("assignment_test")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnName("deadline")
                        .HasColumnType("datetime2");

                    b.Property<double>("DecMark")
                        .HasColumnName("dec_mark")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<double>("Mark")
                        .HasColumnName("mark")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("publish_date")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Solution")
                        .HasColumnName("solution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TDeadline")
                        .HasColumnName("t_deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnName("template")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("GroupId");

                    b.ToTable("Assignment","Assignment");
                });

            modelBuilder.Entity("ProjectDB1.DBClasses.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dept_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasColumnName("dept_name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DeptName")
                        .IsUnique();

                    b.ToTable("Department","Assignment");
                });

            modelBuilder.Entity("ProjectDB1.DBClasses.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("group_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnName("day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupSemester")
                        .IsRequired()
                        .HasColumnName("group_semester")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxNum")
                        .HasColumnName("max_number")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnName("teacher_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnName("time")
                        .HasColumnType("datetime2");

                    b.HasKey("GroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Group","Assignment");
                });

            modelBuilder.Entity("ProjectDB1.DBClasses.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("person_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AFatherName")
                        .IsRequired()
                        .HasColumnName("a_father_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AFirstName")
                        .IsRequired()
                        .HasColumnName("a_first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ASurName")
                        .IsRequired()
                        .HasColumnName("a_sur_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnName("father_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnName("mobile")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnName("sur_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Person","Assignment");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("ProjectDB1.DBClasses.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("submission_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssId")
                        .HasColumnName("assignment_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Mark")
                        .HasColumnName("mark")
                        .HasColumnType("float");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnName("solution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnName("student_id")
                        .HasColumnType("int");

                    b.Property<int>("TryId")
                        .HasColumnName("try_id")
                        .HasColumnType("int");

                    b.HasKey("SubmissionId");

                    b.HasIndex("AssId");

                    b.HasIndex("StudentId");

                    b.ToTable("Submission","Assignment");
                });

            modelBuilder.Entity("ProjectDB1.DBClasses.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Hint")
                        .HasColumnName("hint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User","Assignment");
                });

            modelBuilder.Entity("ProjectDB1.DBClasses.Student", b =>
                {
                    b.HasBaseType("ProjectDB1.DBClasses.Person");

                    b.Property<int>("DepartmentId")
                        .HasColumnName("dept_id")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<string>("RegYear")
                        .IsRequired()
                        .HasColumnName("registration_year")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnNum")
                        .IsRequired()
                        .HasColumnName("university_number")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UnNum")
                        .IsUnique()
                        .HasFilter("[university_number] IS NOT NULL");

                    b.ToTable("Student","Assignment");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("ProjectDB1.DBClasses.Teacher", b =>
                {
                    b.HasBaseType("ProjectDB1.DBClasses.Person");

                    b.ToTable("Teacher","Assignment");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("ProjectDB1.DBClasses.Assignment", b =>
                {
                    b.HasOne("ProjectDB1.DBClasses.Group", "Group")
                        .WithMany("Assignments")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("ForeignKey_Assignment_Group")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectDB1.DBClasses.Group", b =>
                {
                    b.HasOne("ProjectDB1.DBClasses.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("ForeignKey_Group_Teacher")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectDB1.DBClasses.Person", b =>
                {
                    b.HasOne("ProjectDB1.DBClasses.User", "PersonUser")
                        .WithMany("Persons")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ForeignKey_Person_User")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectDB1.DBClasses.Submission", b =>
                {
                    b.HasOne("ProjectDB1.DBClasses.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssId")
                        .HasConstraintName("ForeignKey_Submission_Assignment")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectDB1.DBClasses.Student", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("ForeignKey_Submission_Student")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectDB1.DBClasses.Student", b =>
                {
                    b.HasOne("ProjectDB1.DBClasses.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("ForeignKey_Student_Department")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectDB1.DBClasses.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("ForeignKey_Student_Group")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
